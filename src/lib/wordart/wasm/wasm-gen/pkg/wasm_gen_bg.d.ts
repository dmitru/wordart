/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_rect_free(a: number): void;
export function __wbg_get_rect_x(a: number): number;
export function __wbg_set_rect_x(a: number, b: number): void;
export function __wbg_get_rect_y(a: number): number;
export function __wbg_set_rect_y(a: number, b: number): void;
export function __wbg_get_rect_w(a: number): number;
export function __wbg_set_rect_w(a: number, b: number): void;
export function __wbg_get_rect_h(a: number): number;
export function __wbg_set_rect_h(a: number, b: number): void;
export function __wbg_rectf_free(a: number): void;
export function __wbg_get_rectf_x(a: number): number;
export function __wbg_set_rectf_x(a: number, b: number): void;
export function __wbg_get_rectf_y(a: number): number;
export function __wbg_set_rectf_y(a: number, b: number): void;
export function __wbg_get_rectf_w(a: number): number;
export function __wbg_set_rectf_w(a: number, b: number): void;
export function __wbg_get_rectf_h(a: number): number;
export function __wbg_set_rectf_h(a: number, b: number): void;
export function largest_rect(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function __wbg_matrix_free(a: number): void;
export function __wbg_get_matrix_a(a: number): number;
export function __wbg_set_matrix_a(a: number, b: number): void;
export function __wbg_get_matrix_b(a: number): number;
export function __wbg_set_matrix_b(a: number, b: number): void;
export function __wbg_get_matrix_c(a: number): number;
export function __wbg_set_matrix_c(a: number, b: number): void;
export function __wbg_get_matrix_d(a: number): number;
export function __wbg_set_matrix_d(a: number, b: number): void;
export function __wbg_get_matrix_e(a: number): number;
export function __wbg_set_matrix_e(a: number, b: number): void;
export function __wbg_get_matrix_f(a: number): number;
export function __wbg_set_matrix_f(a: number, b: number): void;
export function matrix_new(): number;
export function matrix_copy(a: number): number;
export function matrix_between(a: number, b: number, c: number): number;
export function matrix_translate_mut(a: number, b: number, c: number): void;
export function matrix_translate(a: number, b: number, c: number): number;
export function matrix_scale_mut(a: number, b: number, c: number): void;
export function matrix_scale(a: number, b: number, c: number): number;
export function matrix_rotate_mut(a: number, b: number): void;
export function matrix_rotate(a: number, b: number): number;
export function matrix_skew_x_mut(a: number, b: number): void;
export function matrix_skew_x(a: number, b: number): number;
export function matrix_skew_y_mut(a: number, b: number): void;
export function matrix_skew_y(a: number, b: number): number;
export function matrix_transform_mut(a: number, b: number): void;
export function matrix_transform_values_mut(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function matrix_transform(a: number, b: number): number;
export function matrix_transform_values(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function matrix_reset_mut(a: number): void;
export function matrix_set_mut(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function matrix_det(a: number): number;
export function __wbg_labint_free(a: number): void;
export function __wbg_get_labint_color_int(a: number): number;
export function __wbg_set_labint_color_int(a: number, b: number): void;
export function __wbg_get_labint_count(a: number): number;
export function __wbg_set_labint_count(a: number, b: number): void;
export function __wbg_get_labint_r(a: number): number;
export function __wbg_set_labint_r(a: number, b: number): void;
export function __wbg_get_labint_g(a: number): number;
export function __wbg_set_labint_g(a: number, b: number): void;
export function __wbg_get_labint_b(a: number): number;
export function __wbg_set_labint_b(a: number, b: number): void;
export function __wbg_get_labint_a(a: number): number;
export function __wbg_set_labint_a(a: number, b: number): void;
export function fill_shapes_by_color(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function __wbg_hboundswasm_free(a: number): void;
export function hboundswasm_clone(a: number): number;
export function hboundswasm_get_bounds(a: number, b: number): number;
export function hboundswasm_get_js(a: number): number;
export function hboundswasm_set_transform(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function hboundswasm_set_transform_matrix(a: number, b: number): void;
export function hboundswasm_inverted(a: number): number;
export function hboundswasm_collides(a: number, b: number, c: number, d: number): number;
export function hboundswasm_collides_transformed(a: number, b: number, c: number, d: number, e: number): number;
export function create_hbounds_by_color(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function create_hbounds(a: number, b: number, c: number, d: number, e: number): number;
export function __wbg_layoutgenwasm_free(a: number): void;
export function layoutgenwasm_new(): number;
export function layoutgenwasm_get_js(a: number): number;
export function layoutgenwasm_collides(a: number, b: number, c: number, d: number, e: number): number;
export function layoutgenwasm_add_item(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
